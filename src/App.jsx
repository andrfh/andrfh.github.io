import {motion } from 'framer-motion'
import HeaderNav from './components/UI/HeaderNav/HeaderNav'
import MainBtn from './components/UI/MainBtn/MainBtn'
import Title from "./components/UI/Title/Title"
import ProjectCard from './components/UI/ProjectCard/ProjectCard'
import me from './pictures/me2.jpg'
import kip from './pictures/kip.jpg'
import reactPicture from './pictures/react.jpg'
import './App.css'
import { useState } from "react"
import StarsBg from './components/StarsBg/StarsBg'

function App() {
  const [active, setActive] = useState('home')

  const courses = [{
    photo: 'üë®‚Äçüíª',
    title: 'React.js',
    description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –ø–æ–º–æ—â–∏ React',
    status: {
      class: 'finished',
      text: '–ó–∞–≤–µ—Ä—à–µ–Ω'
    }
  },
  {
    photo: 'üë®‚Äçüíª',
    title: 'React.js',
    description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –ø–æ–º–æ—â–∏ React',
    status: {
      class: 'finished',
      text: '–ó–∞–≤–µ—Ä—à–µ–Ω'
    }
  },
  {
    photo: 'üë®‚Äçüíª',
    title: 'React.js',
    description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –ø–æ–º–æ—â–∏ React',
    status: {
      class: 'processed',
      text: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
    }
  },
  {
    photo: 'üë®‚Äçüíª',
    title: 'React.js',
    description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –ø–æ–º–æ—â–∏ React',
    status: {
      class: 'processed',
      text: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
    }
  }]

    const projects = [{
        photo: reactPicture,
        title: 'To-do –ª–∏—Å—Ç',
        description: 'A modern e-commerce platform built with React and styled-components. Features include product filtering, shopping cart, and responsive design.',
        tags: ['React', 'Css', 'TypeScript'],
        full_description: 'A comprehensive weather dashboard that provides detailed meteorological information with stunning visualizations. This project demonstrates proficiency in API integration, data visualization, and creating intuitive user interfaces. The application fetches real-time weather data and presents it through interactive charts and graphs, making complex weather patterns easy to understand.',
        key_feauteres: [
          'Real-time weather data from multiple reliable weather APIs',
          'Interactive charts showing temperature trends, humidity, and pressure',
          'Geolocation-based automatic weather detection',
          '7-day detailed weather forecast with hourly breakdowns',
          'Customizable dashboard with drag-and-drop widget arrangement'
        ],
        solutions: [
          'Handling multiple API endpoints and managing data consistency',
          'Creating responsive charts that work well on mobile devices',
          'Implementing efficient caching to minimize API calls and improve performance',
          'Designing an intuitive interface that presents complex data clearly'
        ],
        gallery: [reactPicture, kip, reactPicture]
      },
      {
        photo: kip,
        title: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
        description: '–ß—Ç–æ —Ç—É—Ç –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å? ',
        tags: ['Vue.js', 'Nust.js', 'JavaScript'],
        full_description: 'A comprehensive weather dashboard that provides detailed meteorological information with stunning visualizations. This project demonstrates proficiency in API integration, data visualization, and creating intuitive user interfaces. The application fetches real-time weather data and presents it through interactive charts and graphs, making complex weather patterns easy to understand.',
        key_feauteres: [
          'Real-time weather data from multiple reliable weather APIs',
          'Interactive charts showing temperature trends, humidity, and pressure',
          'Geolocation-based automatic weather detection',
          '7-day detailed weather forecast with hourly breakdowns',
          'Customizable dashboard with drag-and-drop widget arrangement'
        ],
        solutions: [
          'Handling multiple API endpoints and managing data consistency',
          'Creating responsive charts that work well on mobile devices',
          'Implementing efficient caching to minimize API calls and improve performance',
          'Designing an intuitive interface that presents complex data clearly'
        ],
        gallery: [reactPicture, kip, reactPicture]
      },
      {
        photo: reactPicture,
        title: 'Diary of Jane',
        description: 'Something`s getting in the way. Something`s just about to brake',
        tags: ['React', 'HTML', 'JavaScript'],
        full_description: 'A comprehensive weather dashboard that provides detailed meteorological information with stunning visualizations. This project demonstrates proficiency in API integration, data visualization, and creating intuitive user interfaces. The application fetches real-time weather data and presents it through interactive charts and graphs, making complex weather patterns easy to understand.',
        key_feauteres: [
          'Real-time weather data from multiple reliable weather APIs',
          'Interactive charts showing temperature trends, humidity, and pressure',
          'Geolocation-based automatic weather detection',
          '7-day detailed weather forecast with hourly breakdowns',
          'Customizable dashboard with drag-and-drop widget arrangement'
        ],
        solutions: [
          'Handling multiple API endpoints and managing data consistency',
          'Creating responsive charts that work well on mobile devices',
          'Implementing efficient caching to minimize API calls and improve performance',
          'Designing an intuitive interface that presents complex data clearly'
        ],
        gallery: [reactPicture, kip, reactPicture]
      },
      {
        photo: kip,
        title: 'Task Manager',
        description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á',
        tags: ['Tailwind', 'Vue', 'TypeScript'],
        full_description: 'A comprehensive weather dashboard that provides detailed meteorological information with stunning visualizations. This project demonstrates proficiency in API integration, data visualization, and creating intuitive user interfaces. The application fetches real-time weather data and presents it through interactive charts and graphs, making complex weather patterns easy to understand.',
        key_feauteres: [
          'Real-time weather data from multiple reliable weather APIs',
          'Interactive charts showing temperature trends, humidity, and pressure',
          'Geolocation-based automatic weather detection',
          '7-day detailed weather forecast with hourly breakdowns',
          'Customizable dashboard with drag-and-drop widget arrangement'
        ],
        solutions: [
          'Handling multiple API endpoints and managing data consistency',
          'Creating responsive charts that work well on mobile devices',
          'Implementing efficient caching to minimize API calls and improve performance',
          'Designing an intuitive interface that presents complex data clearly'
        ],
        gallery: [reactPicture, kip, reactPicture]
      },
      {
        photo: reactPicture,
        title: 'Task Manager',
        description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á',
        tags: ['Tailwind', 'Vue', 'TypeScript'],
        full_description: 'A comprehensive weather dashboard that provides detailed meteorological information with stunning visualizations. This project demonstrates proficiency in API integration, data visualization, and creating intuitive user interfaces. The application fetches real-time weather data and presents it through interactive charts and graphs, making complex weather patterns easy to understand.',
        key_feauteres: [
          'Real-time weather data from multiple reliable weather APIs',
          'Interactive charts showing temperature trends, humidity, and pressure',
          'Geolocation-based automatic weather detection',
          '7-day detailed weather forecast with hourly breakdowns',
          'Customizable dashboard with drag-and-drop widget arrangement'
        ],
        solutions: [
          'Handling multiple API endpoints and managing data consistency',
          'Creating responsive charts that work well on mobile devices',
          'Implementing efficient caching to minimize API calls and improve performance',
          'Designing an intuitive interface that presents complex data clearly'
        ],
        gallery: [reactPicture, kip, reactPicture]
      },
      {
        photo: kip,
        title: 'Task Manager',
        description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á',
        tags: ['Tailwind', 'Vue', 'TypeScript'],
        full_description: 'A comprehensive weather dashboard that provides detailed meteorological information with stunning visualizations. This project demonstrates proficiency in API integration, data visualization, and creating intuitive user interfaces. The application fetches real-time weather data and presents it through interactive charts and graphs, making complex weather patterns easy to understand.',
        key_feauteres: [
          'Real-time weather data from multiple reliable weather APIs',
          'Interactive charts showing temperature trends, humidity, and pressure',
          'Geolocation-based automatic weather detection',
          '7-day detailed weather forecast with hourly breakdowns',
          'Customizable dashboard with drag-and-drop widget arrangement'
        ],
        solutions: [
          'Handling multiple API endpoints and managing data consistency',
          'Creating responsive charts that work well on mobile devices',
          'Implementing efficient caching to minimize API calls and improve performance',
          'Designing an intuitive interface that presents complex data clearly'
        ],
        gallery: [reactPicture, kip, reactPicture]
      }]

 

  return (
    <div>
      {/* –§–æ–Ω —Å —Å–µ—Ç–∫–æ–π –∏ –∑–≤–µ–∑–¥–∞–º–∏*/}
      <div className="grid">
        <StarsBg numStars={80} />
        <div className="grid-background">
          <svg width="100%" height="100%">
            <defs>
              <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                <path d="M 40 0 L 0 0 0 40" fill="none" stroke="white" strokeW  idth="1" />
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#grid)" />
          </svg>
        </div>
      </div>
      {/* —Ö—ç–¥—ç—Ä */}

      <header className="header">
        <div className="container">
          <div className="header_wrapper">
            <h4>–ú–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</h4>
            <nav className="header_navbar">
              <HeaderNav href="#home" text='–ì–ª–∞–≤–Ω–∞—è' isActive={active == 'home' ? true : ''}/>
              <HeaderNav href="#about" text='–û–±–æ –º–Ω–µ' isActive={active == 'about' ? true : ''}/>
              <HeaderNav href="#education" text='–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' isActive={active == 'edu' ? true : ''}/>
              {/* <HeaderNav href="#expirience" text='–û–ø—ã—Ç' isActive={active == 'portfolio' ? true : ''}/> */}
              <HeaderNav href="#portfolio" text='–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ' isActive={active == 'portfolio' ? true : ''}/>
              <HeaderNav href="#contacts" text='–ö–æ–Ω—Ç–∞–∫—Ç—ã' isActive={active == 'contacts' ? true : ''}/>
            </nav>
          </div>
        </div>
      </header>
      <motion.section className='section' id="home" onViewportEnter={() => {setActive('home')}} viewport={{ amount: 0.7 }}>
        <div className="container">
          <div className="main_wrapper">
            <div className="main_me">
              <h1>–°–æ–ª–æ–Ω–æ–≤–∏—á –ê–Ω–¥—Ä–µ–π</h1>
              <h4>Frontend –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</h4>
              <p>–°–æ–∑–¥–∞—é –∫—Ä–∞—Å–∏–≤—ã–µ –∏ —É–¥–æ–±–Ω—ã–µ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã</p>
              <div className="main_me-skills">
                <span>HTML</span>
                <span>CSS</span>
                <span>JavaScript</span>
                <span>React</span>
                <span>Git</span>
              </div>
              <div className="main_me-btns">
                <MainBtn text='–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã' style='primary'/>
                <MainBtn text="–°–≤—è–∑–∞—Ç—å—Å—è" style='ghost'/>
              </div>
            </div>
            <div className="main_photo">
              <img src={me} alt="" />
            </div>
          </div>
        </div>
      </motion.section>

       <motion.section className='section' id="about" onViewportEnter={() => {setActive('about')}} viewport={{ amount: 0.7 }}>
        <div className="container">
          <div className="about_wrapper">
            <Title text="–û–±–æ –º–Ω–µ"/>
            <div className="about">
              <h3>üë®‚Äçüíª</h3>
              <p>–ü—Ä–∏–≤–µ—Ç! –ú–Ω–µ 19 –ª–µ—Ç, –∏ —è –Ω–∞—á–∏–Ω–∞—é—â–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –±–æ–ª—å—à–æ–π —Å—Ç—Ä–∞—Å—Ç—å—é –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫—Ä–∞—Å–∏–≤—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –†–∞–±–æ—Ç–∞—é —Å HTML, CSS –∏ JavaScript, –∞–∫—Ç–∏–≤–Ω–æ –∏–∑—É—á–∞—é React –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å—Ç—Ä–µ–º–ª—é—Å—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –∏–∑—É—á–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –≤ –º–∏—Ä–µ IT.</p>
            </div>
          </div>
        </div>
      </motion.section>

      <motion.section className='section' id="education" onViewportEnter={() => {setActive('edu')}} viewport={{ amount: 0.7 }}>
        <div className="container">
          <div className="education_wrapper">
            <Title text="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"/>
            <div className="education_main">
              <h4>üë®‚Äçüíª</h4>
                <div className="education_texts">
                  <h5>–ö–æ–ª–ª–µ–¥–∂ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ø—Ä–∏ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏</h5>
                  <p>–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</p>
                  <p className="education_years">2022-2026</p>
                </div>
            </div>
            <div className="education_courses">
              {courses.map(item => {
                return (
                  <div className="education">
                    <div className="education_center">
                      <h4>{item.photo}</h4>
                      <div className="education_texts">
                        <h5>{item.title}</h5>
                        <p>{item.description}</p>
                      </div>
                    </div>
                    <span className={item.status.class}>{item.status.text}</span>
                  </div>
                )
              })}
            </div>
          </div>
        </div>
      </motion.section>

      <motion.section className='section' id="portfolio" onViewportEnter={() => {setActive('portfolio')}} viewport={{ amount: 0.7 }}>
        <div className="container">
          <div className="portfolio_wrapper">
            <Title text="–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"/>
            <div className="portfolio">
              {projects.map(item => {
                return (
                  <ProjectCard project={item}/>
                )
              })}
            </div>
          </div>
        </div>
      </motion.section>
    
    
    </div>
  )
}

export default App
